; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define app_version "1.2.2"
#define app_name "MainTools"
#define app_file "main.exe"
#define website "none"
#define publisher "Me"
#define setup_prefix "main_tools_setup_"
[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{352E0BD9-6646-44E4-A611-115C6CD55681}}
AppName= {#app_name}
AppVersion={#app_version}
AppVerName={#app_name} {#app_version}
AppPublisher={#publisher}
AppPublisherURL={#website}
AppSupportURL={#website}
AppUpdatesURL={#website}
DefaultDirName={src}/{#app_name}
DefaultGroupName={#app_name}
AllowNoIcons=yes
InfoAfterFile=../README.md
OutputBaseFilename={#setup_prefix}{#app_version}
SetupIconFile=../tools/favicon.ico
Compression=lzma
SolidCompression=yes
PrivilegesRequired=lowest

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Dirs]
Name: "{app}\docs"
Name: "{app}\data"
Name: "{app}\tools"


[Files]
Source: "../{#app_file}"; DestDir: "{app}"; Flags: ignoreversion
Source: "../tools/favicon.ico"; DestDir: "{app}\tools"; Flags: ignoreversion
Source: "../docs/*"; DestDir: "{app}\docs"; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes:".sphinx,.keep"
Source: "../tools/.ID_tools-3DF36B5D-694A-4743-96A4-C02B269C95D5"; DestDir: "{app}\tools"; Flags: ignoreversion

// Add source code
Source: "../tools/*"; DestDir: "{app}\tools\src\tools"; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: "*__pycache__,logs,config,venv,.keep"
Source: "../scripts/*"; DestDir: "{app}\tools\src\scripts"; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: "*__pycache__,.keep"
Source: "../main.py"; DestDir: "{app}\tools\src"; Flags: ignoreversion
Source: "../requirements.txt"; DestDir: "{app}\tools\src"; Flags: ignoreversion
Source: "../README.md"; DestDir: "{app}\tools\src"; Flags: ignoreversion


; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#app_name}"; Filename: "{app}\{#app_file}"
Name: "{commondesktop}\{#app_name}"; Filename: "{app}\{#app_file}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#app_name}"; Filename: "{app}\{#app_file}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#app_file}"; Description: "{cm:LaunchProgram,{#app_name}}"; Flags: nowait postinstall skipifsilent

[Code]

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;


/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;